name: Continuous Integration

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      # - name: Build Solidity contracts using makefile
      #   working-directory: packages/contracts
      #   run: |
      #      make build
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --no-audit
      # - name: Run lint
      #   run: npm run lint --workspaces --if-present
      - name: Build and unit test
        run: |
          sudo systemctl enable apport.service
          ulimit -c unlimited         # Enable core dumps to be captured (must be in same run block)
          npm run -w packages/contracts build
          npm run -w packages/client build
          npx ganache -p 3456 -m testrpc
          sudo npm run -w packages/client unit-test
          sudo npm run -w packages/client unit-test
          sudo npm run -w packages/client unit-test
          sudo npm run -w packages/client unit-test
          sudo npm run -w packages/client unit-test
      - name: make crash dump readable for uploader
        if: failure()
        run: |
          ls -al
          ls -al /var/lib/apport/coredump
          sudo apt-get install rlocate
          locate coredump
          sudo chmod -R a+rwx /var/crash/*
          exit 1 # trigger next step too
      - name: upload crash dump
        uses: actions/upload-artifact@master # capture all crashes as build artifacts
        if: failure()
        with:
          name: crashes
          path: /var/crash
      #    npm run test
      # - name: Start MySQL for the monorepo integration test
      #   uses: mirromutth/mysql-action@v1.1
      #   with:
      #     host port: 3800
      #     mysql version: '8.0'
      #     mysql database: 'join-server-test'
      #     mysql root password: 'password'
      # - name: Integration tests (inside monorepo)
      #   env:
      #     SECRET_DB_SCHEMA: join-server-test
      #     SECRET_DB_USER: root
      #     SECRET_DB_PASSWORD: password
      #     SECRET_DB_HOST: localhost
      #     SECRET_DB_PORT: 3800
      #   run: |
      #     sleep 10 # need to allow some time for mysql to start up
      #     mysql --user=root --password=password --host=127.0.0.1 --port=3800 < packages/default-join-server/create_tables.sql
      #     echo "./node_modules/.bin" >> $GITHUB_PATH
      #     npm run integration-test
      # - name: Start Streamr Docker Stack
      #   uses: streamr-dev/streamr-docker-dev-action@v1.0.0
      #   with:
      #     services-to-start: 'parity-sidechain-node0 parity-node0'
      # - name: Integration Test (with dev-docker environment)
      #   env:
      #     TEST_TIMEOUT: '600000'
      #   run: npm run integration-test --workspaces --if-present
